setwd("~/Backup110817/TSP/Data")
#install.packages("ggplot2")
library(ggplot2)
#install.packages("segmented")
#install.packages("lme4")
library(segmented)
#library(lme4)
joint<-read.csv(file="joint.csv")
#View(joint)

old<-subset(joint,Lot=='Old',select=c(Month,ED50))
new<-subset(joint,Lot=='New',select=c(Month,ED50))


####lm for old lot
#ggplot2 http://www.sthda.com/english/articles/40-regression-analysis/166-predict-in-r-model-predictions-and-confidence-intervals/
# 0. Build linear model 
model <- lm( log(ED50)~Month, data = old)
# 1. Add predictions 
pred.int <- predict(model, interval = "prediction")
mydata <- cbind(old, pred.int)
# 2. Regression line + confidence intervals
p <- ggplot(mydata, aes(Month, log(ED50))) +
  geom_point(shape=21,size=6,fill="red4") +
  stat_smooth(method = lm)
# 3. Add prediction intervals
p1<-p + geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
  geom_line(aes(y = upr), color = "red", linetype = "dashed") +
  scale_y_continuous(limits = c(0, 3))+
  theme(axis.text.x=element_text(face="bold",size=18),
        axis.text.y=element_text(face="bold",size=18),
        axis.title=element_text(size=20,face="bold"),
        plot.title = element_text(size = 34, face = "bold"),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black",size=2),
        legend.text=element_text(size=15))+
  #ggtitle("A")+
  labs(y="ln ED50")+
  scale_x_continuous(breaks=c(0,4,7,13,	18,	24,	36,	39,	42,	45,	48,	51,	54,	60,	72))

setwd("~/Backup110817/TSP/Figures")
ggsave(p1,file="Figure 3A.tiff",width=15, height=10,dpi = 300)
#lm for new lot

#ggplot2 http://www.sthda.com/english/articles/40-regression-analysis/166-predict-in-r-model-predictions-and-confidence-intervals/
# 0. Build linear model 
model <- lm( log(ED50)~Month, data = new)
# 1. Add predictions 
pred.int <- predict(model, interval = "prediction")
mydata <- cbind(new, pred.int)
# 2. Regression line + confidence intervals
p <- ggplot(mydata, aes(Month, log(ED50))) +
  geom_point(shape=21,size=8,fill="red4") +
  stat_smooth(method = lm)
# 3. Add prediction intervals
p2<-p + geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
  geom_line(aes(y = upr), color = "red", linetype = "dashed") +
  scale_y_continuous(limits = c(0, 3))+
  theme(axis.text.x=element_text(face="bold",size=24),
  axis.text.y=element_text(face="bold",size=24),
  axis.title=element_text(size=28,face="bold"),
  plot.title = element_text(size = 34, face = "bold"),
  panel.grid.major = element_blank(), 
  panel.grid.minor = element_blank(),
  panel.background = element_blank(), 
  axis.line = element_line(colour = "black",size=2),
  legend.text=element_text(size=15))+
  #ggtitle("B")+
  labs(y="ln ED50")+
  scale_x_continuous(breaks=c(0, 3, 6, 9, 12, 18, 24, 36))
ggsave(p2,file="Figure 3B.tiff",width=15, height=10,dpi = 300)



#o<-lmList( log(ED50)~Month|Lot,data = joint)
o<-lm(log(ED50)~Month,data = old)
o.seg<-segmented(o,~Month)
#str(o.seg)
summary(o.seg)
#o.seg$coefficients
#o.seg$model
par(mfrow=c(1,2))
#plot(o.seg, conf.level=0.95, shade=TRUE,ylab="ln ED50")
#points(o.seg, link=TRUE, col=2)

#par(mfrow=c(1,2))
#setwd("~/Backup110817/TSP/Figures")
attach(old)
#tiff(file="Figure3C.tiff",width=15,height=10,units='in',res = 300)
par(cex.axis=2,cex.lab=2,xaxs="i",yaxs="i",mar=c(4,6,4,1))
#plot.window(, )
plot(Month,log(ED50),ylab="ln ED50",ylim=c(0,2.5),xlim=c(-5,80),
     pch=19,col="darkgreen",cex=4, frame.plot = FALSE)
plot(o.seg,add=TRUE,link=FALSE,lwd=6,col=2:3, lty=c(1,3))
#axis(side = 1, pos=0)
axis(side = 2,lwd.ticks = 0,lwd=4)
abline(h=0,lwd=4)
lines(o.seg,col= "grey1" ,pch=19,bottom=FALSE,lwd=3) #for the CI for the breakpoint
points(o.seg,col="blue4", link=FALSE,cex=3)
#p3<-recordPlot()
#dev.off()
## using the options 'is', 'isV', 'shade' and 'col.shade'.

#tiff(file="Figure3D.tiff",width=15,height=10,units='in',res=300)
par(cex.axis=2,cex.lab=2,xaxs="i",yaxs="i",mar=c(4,6,4,1))
plot(o.seg, conf.level=.95, is=TRUE, isV=TRUE, col=1, shade = TRUE, 
     col.shade=4,ylim=c(0,2.5),xlim=c(-5,80),cex=4, frame.plot = FALSE)
axis(side = 2,lwd.ticks = 0,lwd=4)
p3<-recordPlot()
#dev.off()
#plot(o.seg, conf.level=.9, is=TRUE, isV=FALSE, col=2, shade = TRUE)


###The above is for old lot, below is for new lot
o<-lm(log(ED50)~Month,data = new)
o.seg<-segmented(o,~Month)
summary(o.seg)
par(mfrow=c(2,1))
plot(o.seg, conf.level=0.95, shade=TRUE)
points(o.seg, link=TRUE, col=2)


attach(new)
plot(Month,log(ED50))
plot(o.seg,add=TRUE,link=FALSE,lwd=2,col=2:3, lty=c(1,3))
lines(o.seg,col=2,pch=19,bottom=FALSE,lwd=2) #for the CI for the breakpoint
points(o.seg,col=4, link=FALSE)
## using the options 'is', 'isV', 'shade' and 'col.shade'.
par(mfrow=c(1,2))
plot(o.seg, conf.level=.9, is=TRUE, isV=TRUE, col=1, shade = TRUE, col.shade=2)
plot(o.seg, conf.level=.9, is=TRUE, isV=FALSE, col=2, shade = TRUE)



#install.packages("cowplot")
#install.packages("gridGraphics")
library(cowplot)
library(gridGraphics)





top_row<-plot_grid(p1,p2,labels = c('A','B'),label_size = 24,rel_widths = c(2,1))

plot_grid(top_row,p3,  labels = c( '','c'), label_size = 24,ncol = 1)



library(gridBase)
par(mfrow=c(3, 1))

par(cex.axis=2,cex.lab=2,xaxs="i",yaxs="i",mar=c(4,6,4,1))
plot(Month,log(ED50),ylab="ln ED50",ylim=c(0,2.5),xlim=c(-5,80),
     pch=19,col="darkgreen",cex=4, frame.plot = FALSE)
plot(o.seg,add=TRUE,conf.level=.95,shade = TRUE, 
     col.shade=4,link=FALSE, is=TRUE, isV=TRUE,lwd=6,col=2:3, lty=c(1,3))
axis(side = 2,lwd.ticks = 0,lwd=4)
abline(h=0,lwd=4)
lines(o.seg,col= "grey1" ,pch=19,bottom=FALSE,lwd=3) #for the CI for the breakpoint
points(o.seg,col="blue4", link=FALSE,cex=3)

plot.new()              ## suggested by @Josh
vps <- baseViewports()
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot
vp1 <-plotViewport(c(1,0,0,0)) ## create new vp with margins, you play with this values 
require(ggplot2)

print(p1,vp=vp1)

plot.new()
vps1 <- baseViewports()
pushViewport(vps1$plot) ##   I am in the space of the autocorrelation plot
vp2 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values 

print(p2,vp=vp2)
